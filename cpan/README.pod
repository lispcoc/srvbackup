
=pod

Back in the early days of the web, many people learned Perl because of a
wonderful Perl library called L<CGI>.
It was simple enough to get started without knowing much about the language
and powerful enough to keep you going, learning by doing was much fun.
While most of the techniques used are outdated now, the idea behind it is not.
L<Mojolicious> is a new attempt at implementing this idea using state of the
art technology.

=head2 Features

=over 2

=item *

An amazing MVC web framework supporting a simplified single file mode through
L<Mojolicious::Lite>.

=over 2

Powerful out of the box with RESTful routes, plugins, Perl-ish templates,
session management, signed cookies, testing framework, static file server,
I18N, first class unicode support and much more for you to discover.

=back

=item *

Very clean, portable and Object Oriented pure Perl API without any hidden
magic and no requirements besides Perl 5.8.7 (although 5.10+ is recommended).

=item *

Full stack HTTP 1.1 and WebSocket client/server implementation with IPv6,
TLS, Bonjour, IDNA, Comet (long polling), chunking and multipart support.

=item *

Built-in async IO web server supporting epoll, kqueue, UNIX domain sockets
and hot deployment, perfect for embedding.

=item *

Automatic CGI, FastCGI and L<PSGI> detection.

=item *

JSON and XML/HTML5 parser with CSS3 selector support.

=item *

Fresh code based upon years of experience developing L<Catalyst>.

=back

=head2 Installation

All you need is a oneliner.

  sudo sh -c "curl -L cpanmin.us | perl - Mojolicious"

=head2 Getting Started

These three lines are a whole web application.

  use Mojolicious::Lite;

  get '/' => sub { shift->render_text('Hello World!') };

  app->start;

To run this example with the built-in development web server just put the
code into a file and execute it with C<perl>.

  % perl hello.pl daemon
  Server available at http://127.0.0.1:3000.

  % curl http://127.0.0.1:3000/
  Hello World!

=head2 Duct Tape For The HTML5 Web

Web development for humans, making hard things possible and everything fun.

  use Mojolicious::Lite;

  # Simple plain text response
  get '/' => sub { shift->render_text('Hello World!') };

  # Route associating the "/time" URL to template in DATA section
  get '/time' => 'clock';

  # RESTful web service sending JSON responses
  get '/list/:offset' => sub {
    my $self = shift;
    $self->render_json({list => [0 .. $self->param('offset')]});
  };

  # Scrape and return information from remote sites
  post '/title' => sub {
    my $self = shift;
    my $url  = $self->param('url') || 'http://mojolicio.us';
    $self->render_text(
      $self->ua->get($url)->res->dom->html->head->title->text);
  };

  # WebSocket echo service
  websocket '/echo' => sub {
    my $self = shift;
    $self->on_message(sub {
      my ($self, $message) = @_;
      $self->send_message("echo: $message");
    });
  };

  app->start;
  __DATA__

  @@ clock.html.ep
  % my ($second, $minute, $hour) = (localtime(time))[0, 1, 2];
  <%= link_to clock => begin %>
    The time is <%= $hour %>:<%= $minute %>:<%= $second %>.
  <% end %>

=head2 Growing

Single file prototypes can easily grow into well-structured applications.
A controller collects several actions together.

  package MyApp::Example;
  use Mojo::Base 'Mojolicious::Controller';

  # Plain text response
  sub hello { shift->render_text('Hello World!') }

  # Render external template "templates/example/clock.html.ep"
  sub clock { shift->render }

  # RESTful web service sending JSON responses
  sub restful {
    my $self = shift;
    $self->render_json({list => [0 .. $self->param('offset')]});
  }

  # Scrape and return information from remote sites
  sub title {
    my $self = shift;
    my $url  = $self->param('url') || 'http://mojolicio.us';
    $self->render_text(
      $self->ua->get($url)->res->dom->html->head->title->text);
  }

  1;

While the application class is unique, you can have as many controllers as
you like.

  package MyApp::Realtime;
  use Mojo::Base 'Mojolicious::Controller';

  # WebSocket echo service
  sub echo {
    my $self = shift;
    $self->on_message(sub {
      my ($self, $message) = @_;
      $self->send_message("echo: $message");
    });
  }

  1;

Larger applications benefit from the separation of actions and routes,
especially when working in a team.

  package MyApp;
  use Mojo::Base 'Mojolicious';

  # Runs once on application startup
  sub startup {
    my $self = shift;
    my $r    = $self->routes;

    # Create a route at "/example" for the "MyApp::Example" controller
    my $example = $r->route('/example')->to('example#');

    # Connect these HTTP GET routes to actions in the controller
    # (paths are relative to the controller)
    $example->get('/')->to('#hello');
    $example->get('/time')->to('#clock');
    $example->get('/list/:offset')->to('#restful');

    # All common HTTP verbs are supported
    $example->post('/title')->to('#title');

    # ... and much, much more
    # (including multiple, auto-discovered controllers)
    $r->websocket('/echo')->to('realtime#echo');
  }

  1;

Through all of these changes, your action code and templates can stay almost
exactly the same.

  % my ($second, $minute, $hour) = (localtime(time))[0, 1, 2];
  <%= link_to clock => begin %>
    The time is <%= $hour %>:<%= $minute %>:<%= $second %>.
  <% end %>

Mojolicious has been designed from the ground up for a fun and unique
workflow.

=head2 Want to know more?

Take a look at our excellent documentation at L<http://mojolicio.us/perldoc>!

=cut
